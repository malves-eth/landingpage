name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Lint and Test
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project: [web, api]
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v5
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json
      
      - name: 📥 Install dependencies
        run: npm ci --prefix ${{ matrix.project }}
      
      - name: 🔍 Run ESLint
        run: npm run lint --prefix ${{ matrix.project }}
      
      - name: 🧪 Run tests
        run: npm run test --prefix ${{ matrix.project }}
        env:
          CI: true
      
      - name: 🏗️ Build project
        run: npm run build --prefix ${{ matrix.project }}
        env:
          NEXT_PUBLIC_SITE_URL: https://www.alvescuryfinancial.com
          NEXT_PUBLIC_WHATSAPP_PHONE: 15618231966
          NEXT_PUBLIC_BRAND_NAME: "Alves Cury Financial"

  # Security scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v5
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 🔍 Run npm audit (Web)
        run: |
          cd web
          npm audit --audit-level moderate || true
      
      - name: 🔍 Run npm audit (API)
        run: |
          cd api
          npm audit --audit-level moderate || true

  # Deploy to staging (develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v5
      
      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: web
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy to production (main branch)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v5
      
      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: web
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Create GitHub Release (semantic versioning)
  release:
    name: 📦 Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Simple semantic versioning based on commit messages
          VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "Automated release for commit $(git rev-parse --short HEAD)" \
            --latest